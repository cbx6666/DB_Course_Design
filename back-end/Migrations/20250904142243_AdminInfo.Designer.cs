// <auto-generated />
using System;
using BackEnd.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oracle.EntityFrameworkCore.Metadata;

#nullable disable

namespace BackEnd.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250904142243_AdminInfo")]
    partial class AdminInfo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            OracleModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BackEnd.Models.Administrator", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("USERID");

                    b.Property<DateTime>("AdminRegistrationTime")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("ADMINREGISTRATIONTIME");

                    b.Property<string>("AdminRole")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)")
                        .HasColumnName("ADMINROLE");

                    b.Property<decimal>("IssueHandlingScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3,2)")
                        .HasDefaultValue(0.00m)
                        .HasColumnName("ISSUEHANDLINGSCORE");

                    b.Property<string>("ManagedEntities")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR2(50)")
                        .HasColumnName("MANAGEDENTITIES");

                    b.HasKey("UserID");

                    b.ToTable("ADMINISTRATORS", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.AfterSaleApplication", b =>
                {
                    b.Property<int>("ApplicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("APPLICATIONID");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationID"));

                    b.Property<string>("AfterSaleState")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR2(50)")
                        .HasDefaultValue("Pending")
                        .HasColumnName("AFTERSALESTATE");

                    b.Property<DateTime>("ApplicationTime")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("APPLICATIONTIME");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<int>("OrderID")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ORDERID");

                    b.Property<string>("ProcessingReason")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)")
                        .HasColumnName("PROCESSINGREASON");

                    b.Property<string>("ProcessingRemark")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)")
                        .HasColumnName("PROCESSINGREMARK");

                    b.Property<string>("ProcessingResult")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)")
                        .HasColumnName("PROCESSINGRESULT");

                    b.HasKey("ApplicationID");

                    b.HasIndex("OrderID");

                    b.ToTable("AFTER_SALE_APPLICATIONS", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.Comment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("COMMENTID");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentID"));

                    b.Property<string>("CommentImage")
                        .HasMaxLength(1000)
                        .HasColumnType("NVARCHAR2(1000)")
                        .HasColumnName("COMMENTIMAGE");

                    b.Property<string>("CommentState")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR2(50)")
                        .HasDefaultValue("Pending")
                        .HasColumnName("COMMENTSTATE");

                    b.Property<int>("CommentType")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("COMMENTTYPE");

                    b.Property<int>("CommenterID")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("COMMENTERID");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR2(500)")
                        .HasColumnName("CONTENT");

                    b.Property<int?>("FoodOrderID")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("FOODORDERID");

                    b.Property<int>("Likes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasDefaultValue(0)
                        .HasColumnName("LIKES");

                    b.Property<DateTime>("PostedAt")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("POSTEDAT");

                    b.Property<int?>("Rating")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("RATING");

                    b.Property<int>("Replies")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasDefaultValue(0)
                        .HasColumnName("REPLIES");

                    b.Property<int?>("ReplyToCommentID")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("REPLYTOCOMMENTID");

                    b.Property<int?>("StoreID")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("STOREID");

                    b.HasKey("CommentID");

                    b.HasIndex("CommenterID");

                    b.HasIndex("FoodOrderID");

                    b.HasIndex("ReplyToCommentID");

                    b.HasIndex("StoreID");

                    b.ToTable("COMMENTS", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.Coupon", b =>
                {
                    b.Property<int>("CouponID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("COUPONID");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CouponID"));

                    b.Property<int>("CouponManagerID")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("COUPONMANAGERID");

                    b.Property<string>("CouponState")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)")
                        .HasColumnName("COUPONSTATE");

                    b.Property<int>("CustomerID")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("CUSTOMERID");

                    b.Property<int?>("OrderID")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ORDERID");

                    b.HasKey("CouponID");

                    b.HasIndex("CouponManagerID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("OrderID");

                    b.ToTable("COUPONS", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.CouponManager", b =>
                {
                    b.Property<int>("CouponManagerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("COUPONMANAGERID");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CouponManagerID"));

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("DISCOUNTAMOUNT");

                    b.Property<decimal>("MinimumSpend")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("MINIMUMSPEND");

                    b.Property<int>("StoreID")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("STOREID");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("VALIDFROM");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("VALIDTO");

                    b.HasKey("CouponManagerID");

                    b.HasIndex("StoreID");

                    b.ToTable("COUPON_MANAGERS", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.Courier", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("USERID");

                    b.Property<decimal>("AverageRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3,2)")
                        .HasDefaultValue(0.00m)
                        .HasColumnName("AVERAGERATING");

                    b.Property<int>("AvgDeliveryTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasDefaultValue(0)
                        .HasColumnName("AVGDELIVERYTIME");

                    b.Property<decimal?>("CourierLatitude")
                        .HasColumnType("decimal(10,6)")
                        .HasColumnName("COURIERLATITUDE");

                    b.Property<decimal?>("CourierLongitude")
                        .HasColumnType("decimal(10,6)")
                        .HasColumnName("COURIERLONGITUDE");

                    b.Property<DateTime>("CourierRegistrationTime")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("COURIERREGISTRATIONTIME");

                    b.Property<string>("IsOnline")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("NVARCHAR2(10)")
                        .HasColumnName("ISONLINE");

                    b.Property<DateTime?>("LastOnlineTime")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("LASTONLINETIME");

                    b.Property<int>("MonthlySalary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasDefaultValue(0)
                        .HasColumnName("MONTHLYSALARY");

                    b.Property<int>("ReputationPoints")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasDefaultValue(0)
                        .HasColumnName("REPUTATIONPOINTS");

                    b.Property<int>("TotalDeliveries")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasDefaultValue(0)
                        .HasColumnName("TOTALDELIVERIES");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)")
                        .HasColumnName("VEHICLETYPE");

                    b.HasKey("UserID");

                    b.ToTable("COURIERS", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.Customer", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("USERID");

                    b.Property<string>("DefaultAddress")
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR2(100)")
                        .HasColumnName("DEFAULTADDRESS");

                    b.Property<string>("IsMember")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)")
                        .HasDefaultValue("NotMember")
                        .HasColumnName("ISMEMBER");

                    b.Property<int>("ReputationPoints")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasDefaultValue(0)
                        .HasColumnName("REPUTATIONPOINTS");

                    b.HasKey("UserID");

                    b.ToTable("CUSTOMERS", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.DeliveryComplaint", b =>
                {
                    b.Property<int>("ComplaintID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("COMPLAINTID");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComplaintID"));

                    b.Property<string>("ComplaintReason")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)")
                        .HasColumnName("COMPLAINTREASON");

                    b.Property<string>("ComplaintState")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR2(50)")
                        .HasDefaultValue("Pending")
                        .HasColumnName("COMPLAINTSTATE");

                    b.Property<DateTime>("ComplaintTime")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("COMPLAINTTIME");

                    b.Property<int>("CourierID")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("COURIERID");

                    b.Property<int>("CustomerID")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("CUSTOMERID");

                    b.Property<int>("DeliveryTaskID")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("DELIVERYTASKID");

                    b.Property<string>("ProcessingReason")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)")
                        .HasColumnName("PROCESSINGREASON");

                    b.Property<string>("ProcessingRemark")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)")
                        .HasColumnName("PROCESSINGREMARK");

                    b.Property<string>("ProcessingResult")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)")
                        .HasColumnName("PROCESSINGRESULT");

                    b.HasKey("ComplaintID");

                    b.HasIndex("CourierID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("DeliveryTaskID");

                    b.ToTable("DELIVERY_COMPLAINTS", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.DeliveryTask", b =>
                {
                    b.Property<int>("TaskID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("TASKID");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskID"));

                    b.Property<DateTime>("AcceptTime")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("ACCEPTTIME");

                    b.Property<DateTime?>("CompletionTime")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("COMPLETIONTIME");

                    b.Property<int>("CourierID")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("COURIERID");

                    b.Property<int>("CustomerID")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("CUSTOMERID");

                    b.Property<decimal>("DeliveryFee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0.00m)
                        .HasColumnName("DELIVERYFEE");

                    b.Property<DateTime>("EstimatedArrivalTime")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("ESTIMATEDARRIVALTIME");

                    b.Property<DateTime>("EstimatedDeliveryTime")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("ESTIMATEDDELIVERYTIME");

                    b.Property<int>("OrderID")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ORDERID");

                    b.Property<DateTime>("PublishTime")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("PUBLISHTIME");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)")
                        .HasDefaultValue("Pending")
                        .HasColumnName("STATUS");

                    b.Property<int>("StoreID")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("STOREID");

                    b.HasKey("TaskID");

                    b.HasIndex("CourierID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("OrderID")
                        .IsUnique();

                    b.HasIndex("StoreID");

                    b.ToTable("DELIVERY_TASKS", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.Dish", b =>
                {
                    b.Property<int>("DishID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("DISHID");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DishID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR2(500)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("DishImage")
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR2(500)")
                        .HasColumnName("DISHIMAGE");

                    b.Property<string>("DishName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR2(50)")
                        .HasColumnName("DISHNAME");

                    b.Property<string>("IsSoldOut")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)")
                        .HasDefaultValue("IsSoldOut")
                        .HasColumnName("ISSOLDOUT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("PRICE");

                    b.HasKey("DishID");

                    b.ToTable("DISHES", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.Evaluate_AfterSale", b =>
                {
                    b.Property<int>("AdminID")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ADMINID")
                        .HasColumnOrder(0);

                    b.Property<int>("ApplicationID")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("APPLICATIONID")
                        .HasColumnOrder(1);

                    b.HasKey("AdminID", "ApplicationID");

                    b.HasIndex("ApplicationID");

                    b.ToTable("EVALUATE_AFTER_SALE", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.Evaluate_Complaint", b =>
                {
                    b.Property<int>("AdminID")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ADMINID")
                        .HasColumnOrder(0);

                    b.Property<int>("ComplaintID")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("COMPLAINTID")
                        .HasColumnOrder(1);

                    b.HasKey("AdminID", "ComplaintID");

                    b.HasIndex("ComplaintID");

                    b.ToTable("EVALUATE_COMPLAINT", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.FavoriteItem", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ITEMID");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemID"));

                    b.Property<string>("FavoriteReason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR2(500)")
                        .HasColumnName("FAVORITEREASON");

                    b.Property<DateTime>("FavoritedAt")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("FAVORITEDAT");

                    b.Property<int>("FolderID")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("FOLDERID");

                    b.Property<int>("StoreID")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("STOREID");

                    b.HasKey("ItemID");

                    b.HasIndex("FolderID");

                    b.HasIndex("StoreID");

                    b.ToTable("FAVORITE_ITEMS", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.FavoritesFolder", b =>
                {
                    b.Property<int>("FolderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("FOLDERID");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FolderID"));

                    b.Property<int>("CustomerID")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("CUSTOMERID");

                    b.Property<string>("FolderName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR2(50)")
                        .HasColumnName("FOLDERNAME");

                    b.HasKey("FolderID");

                    b.HasIndex("CustomerID");

                    b.ToTable("FAVORITES_FOLDERS", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.FoodOrder", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ORDERID");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<int?>("CartID")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("CARTID");

                    b.Property<int>("CustomerID")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("CUSTOMERID");

                    b.Property<string>("FoodOrderState")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)")
                        .HasColumnName("FOODORDERSTATE");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("ORDERTIME");

                    b.Property<DateTime?>("PaymentTime")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("PAYMENTTIME");

                    b.Property<string>("Remarks")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)")
                        .HasColumnName("REMARKS");

                    b.Property<int>("StoreID")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("STOREID");

                    b.HasKey("OrderID");

                    b.HasIndex("CartID")
                        .IsUnique()
                        .HasFilter("\"CARTID\" IS NOT NULL");

                    b.HasIndex("CustomerID");

                    b.HasIndex("StoreID");

                    b.ToTable("FOOD_ORDERS", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.Menu", b =>
                {
                    b.Property<int>("MenuID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("MENUID");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuID"));

                    b.Property<DateTime>("ActivePeriod")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("ACTIVEPERIOD");

                    b.Property<int>("StoreID")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("STOREID");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR2(50)")
                        .HasColumnName("VERSION");

                    b.HasKey("MenuID");

                    b.HasIndex("StoreID");

                    b.ToTable("MENUS", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.Menu_Dish", b =>
                {
                    b.Property<int>("MenuID")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("MENUID")
                        .HasColumnOrder(0);

                    b.Property<int>("DishID")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("DISHID")
                        .HasColumnOrder(1);

                    b.HasKey("MenuID", "DishID");

                    b.HasIndex("DishID");

                    b.ToTable("MENU_DISH", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.Review_Comment", b =>
                {
                    b.Property<int>("AdminID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ADMINID")
                        .HasColumnOrder(0);

                    b.Property<int>("CommentID")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("COMMENTID")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("ReviewTime")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("REVIEWTIME");

                    b.HasKey("AdminID", "CommentID");

                    b.HasIndex("CommentID");

                    b.ToTable("REVIEW_COMMENT", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.Seller", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("USERID");

                    b.Property<string>("BanStatus")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("NVARCHAR2(10)")
                        .HasColumnName("BANSTATUS");

                    b.Property<int>("ReputationPoints")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasDefaultValue(0)
                        .HasColumnName("REPUTATIONPOINTS");

                    b.Property<DateTime>("SellerRegistrationTime")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("SELLERREGISTRATIONTIME");

                    b.HasKey("UserID");

                    b.ToTable("SELLERS", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.ShoppingCart", b =>
                {
                    b.Property<int>("CartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("CARTID");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartID"));

                    b.Property<int>("CustomerID")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("CUSTOMERID");

                    b.Property<DateTime>("LastUpdatedTime")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("LASTUPDATEDTIME");

                    b.Property<decimal>("TotalPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0.00m)
                        .HasColumnName("TOTALPRICE");

                    b.HasKey("CartID");

                    b.HasIndex("CustomerID");

                    b.ToTable("SHOPPING_CARTS", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.ShoppingCartItem", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ITEMID");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemID"));

                    b.Property<int>("CartID")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("CARTID");

                    b.Property<int>("DishID")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("DISHID");

                    b.Property<int>("Quantity")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("QUANTITY");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("TOTALPRICE");

                    b.HasKey("ItemID");

                    b.HasIndex("CartID");

                    b.HasIndex("DishID");

                    b.ToTable("SHOPPING_CART_ITEMS", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.Store", b =>
                {
                    b.Property<int>("StoreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("STOREID");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StoreID"));

                    b.Property<decimal>("AverageRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0.00m)
                        .HasColumnName("AVERAGERATING");

                    b.Property<TimeSpan>("CloseTime")
                        .HasColumnType("INTERVAL DAY(8) TO SECOND(7)")
                        .HasColumnName("CLOSETIME");

                    b.Property<int>("MonthlySales")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("MONTHLYSALES");

                    b.Property<TimeSpan>("OpenTime")
                        .HasColumnType("INTERVAL DAY(8) TO SECOND(7)")
                        .HasColumnName("OPENTIME");

                    b.Property<int>("SellerID")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SELLERID");

                    b.Property<string>("StoreAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR2(100)")
                        .HasColumnName("STOREADDRESS");

                    b.Property<string>("StoreCategory")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)")
                        .HasColumnName("STORECATEGORY");

                    b.Property<DateTime>("StoreCreationTime")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("STORECREATIONTIME");

                    b.Property<string>("StoreFeatures")
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR2(500)")
                        .HasColumnName("STOREFEATURES");

                    b.Property<string>("StoreImage")
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR2(500)")
                        .HasColumnName("STOREIMAGE");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR2(50)")
                        .HasColumnName("STORENAME");

                    b.Property<string>("StoreState")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)")
                        .HasColumnName("STORESTATE");

                    b.HasKey("StoreID");

                    b.HasIndex("SellerID")
                        .IsUnique();

                    b.ToTable("STORES", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.StoreViolationPenalty", b =>
                {
                    b.Property<int>("PenaltyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("PENALTYID");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PenaltyID"));

                    b.Property<string>("PenaltyNote")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)")
                        .HasColumnName("PENALTYNOTE");

                    b.Property<string>("PenaltyReason")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)")
                        .HasColumnName("PENALTYREASON");

                    b.Property<DateTime>("PenaltyTime")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("PENALTYTIME");

                    b.Property<string>("SellerPenalty")
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR2(50)")
                        .HasColumnName("SELLERPENALTY");

                    b.Property<int>("StoreID")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("STOREID");

                    b.Property<string>("StorePenalty")
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR2(50)")
                        .HasColumnName("STOREPENALTY");

                    b.Property<string>("ViolationPenaltyState")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR2(50)")
                        .HasDefaultValue("Pending")
                        .HasColumnName("VIOLATIONPENALTYSTATE");

                    b.HasKey("PenaltyID");

                    b.HasIndex("StoreID");

                    b.ToTable("STORE_VIOLATION_PENALTIES", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.Supervise_", b =>
                {
                    b.Property<int>("AdminID")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ADMINID")
                        .HasColumnOrder(0);

                    b.Property<int>("PenaltyID")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("PENALTYID")
                        .HasColumnOrder(1);

                    b.HasKey("AdminID", "PenaltyID");

                    b.HasIndex("PenaltyID");

                    b.ToTable("SUPERVISE_", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("USERID");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<DateTime>("AccountCreationTime")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("ACCOUNTCREATIONTIME");

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)")
                        .HasColumnName("AVATAR");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("BIRTHDAY");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("NVARCHAR2(30)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("FullName")
                        .HasMaxLength(6)
                        .HasColumnType("NVARCHAR2(6)")
                        .HasColumnName("FULLNAME");

                    b.Property<string>("Gender")
                        .HasMaxLength(2)
                        .HasColumnType("NVARCHAR2(2)")
                        .HasColumnName("GENDER");

                    b.Property<string>("IsProfilePublic")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)")
                        .HasColumnName("ISPROFILEPUBLIC");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("NVARCHAR2(64)")
                        .HasColumnName("PASSWORD");

                    b.Property<long>("PhoneNumber")
                        .HasColumnType("NUMBER(19)")
                        .HasColumnName("PHONENUMBER");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)")
                        .HasColumnName("ROLE");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("NVARCHAR2(15)")
                        .HasColumnName("USERNAME");

                    b.HasKey("UserID");

                    b.ToTable("USERS", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.Administrator", b =>
                {
                    b.HasOne("BackEnd.Models.User", "User")
                        .WithOne("Administrator")
                        .HasForeignKey("BackEnd.Models.Administrator", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackEnd.Models.AfterSaleApplication", b =>
                {
                    b.HasOne("BackEnd.Models.FoodOrder", "Order")
                        .WithMany("AfterSaleApplications")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BackEnd.Models.Comment", b =>
                {
                    b.HasOne("BackEnd.Models.Customer", "Commenter")
                        .WithMany("Comments")
                        .HasForeignKey("CommenterID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.FoodOrder", "FoodOrder")
                        .WithMany("Comments")
                        .HasForeignKey("FoodOrderID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BackEnd.Models.Comment", "ReplyToComment")
                        .WithMany("CommentReplies")
                        .HasForeignKey("ReplyToCommentID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BackEnd.Models.Store", "Store")
                        .WithMany("Comments")
                        .HasForeignKey("StoreID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Commenter");

                    b.Navigation("FoodOrder");

                    b.Navigation("ReplyToComment");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("BackEnd.Models.Coupon", b =>
                {
                    b.HasOne("BackEnd.Models.CouponManager", "CouponManager")
                        .WithMany("Coupons")
                        .HasForeignKey("CouponManagerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Customer", "Customer")
                        .WithMany("Coupons")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.FoodOrder", "Order")
                        .WithMany("Coupons")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CouponManager");

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BackEnd.Models.CouponManager", b =>
                {
                    b.HasOne("BackEnd.Models.Store", "Store")
                        .WithMany("CouponManagers")
                        .HasForeignKey("StoreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("BackEnd.Models.Courier", b =>
                {
                    b.HasOne("BackEnd.Models.User", "User")
                        .WithOne("Courier")
                        .HasForeignKey("BackEnd.Models.Courier", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackEnd.Models.Customer", b =>
                {
                    b.HasOne("BackEnd.Models.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("BackEnd.Models.Customer", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackEnd.Models.DeliveryComplaint", b =>
                {
                    b.HasOne("BackEnd.Models.Courier", "Courier")
                        .WithMany()
                        .HasForeignKey("CourierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.DeliveryTask", "DeliveryTask")
                        .WithMany("DeliveryComplaints")
                        .HasForeignKey("DeliveryTaskID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Courier");

                    b.Navigation("Customer");

                    b.Navigation("DeliveryTask");
                });

            modelBuilder.Entity("BackEnd.Models.DeliveryTask", b =>
                {
                    b.HasOne("BackEnd.Models.Courier", "Courier")
                        .WithMany("DeliveryTasks")
                        .HasForeignKey("CourierID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Customer", "Customer")
                        .WithMany("DeliveryTasks")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.FoodOrder", "Order")
                        .WithOne("DeliveryTask")
                        .HasForeignKey("BackEnd.Models.DeliveryTask", "OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Store", "Store")
                        .WithMany("DeliveryTasks")
                        .HasForeignKey("StoreID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Courier");

                    b.Navigation("Customer");

                    b.Navigation("Order");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("BackEnd.Models.Evaluate_AfterSale", b =>
                {
                    b.HasOne("BackEnd.Models.Administrator", "Admin")
                        .WithMany("EvaluateAfterSales")
                        .HasForeignKey("AdminID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.AfterSaleApplication", "Application")
                        .WithMany("EvaluateAfterSales")
                        .HasForeignKey("ApplicationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("BackEnd.Models.Evaluate_Complaint", b =>
                {
                    b.HasOne("BackEnd.Models.Administrator", "Admin")
                        .WithMany("EvaluateComplaints")
                        .HasForeignKey("AdminID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.DeliveryComplaint", "Complaint")
                        .WithMany("EvaluateComplaints")
                        .HasForeignKey("ComplaintID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Complaint");
                });

            modelBuilder.Entity("BackEnd.Models.FavoriteItem", b =>
                {
                    b.HasOne("BackEnd.Models.FavoritesFolder", "Folder")
                        .WithMany("FavoriteItems")
                        .HasForeignKey("FolderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Store", "Store")
                        .WithMany("FavoriteItems")
                        .HasForeignKey("StoreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Folder");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("BackEnd.Models.FavoritesFolder", b =>
                {
                    b.HasOne("BackEnd.Models.Customer", "Customer")
                        .WithMany("FavoritesFolders")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BackEnd.Models.FoodOrder", b =>
                {
                    b.HasOne("BackEnd.Models.ShoppingCart", "Cart")
                        .WithOne("Order")
                        .HasForeignKey("BackEnd.Models.FoodOrder", "CartID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BackEnd.Models.Customer", "Customer")
                        .WithMany("FoodOrders")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Store", "Store")
                        .WithMany("FoodOrders")
                        .HasForeignKey("StoreID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Customer");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("BackEnd.Models.Menu", b =>
                {
                    b.HasOne("BackEnd.Models.Store", "Store")
                        .WithMany("Menus")
                        .HasForeignKey("StoreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("BackEnd.Models.Menu_Dish", b =>
                {
                    b.HasOne("BackEnd.Models.Dish", "Dish")
                        .WithMany("MenuDishes")
                        .HasForeignKey("DishID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Menu", "Menu")
                        .WithMany("MenuDishes")
                        .HasForeignKey("MenuID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("BackEnd.Models.Review_Comment", b =>
                {
                    b.HasOne("BackEnd.Models.Administrator", "Admin")
                        .WithMany("ReviewComments")
                        .HasForeignKey("AdminID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Comment", "Comment")
                        .WithMany("ReviewComments")
                        .HasForeignKey("CommentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("BackEnd.Models.Seller", b =>
                {
                    b.HasOne("BackEnd.Models.User", "User")
                        .WithOne("Seller")
                        .HasForeignKey("BackEnd.Models.Seller", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackEnd.Models.ShoppingCart", b =>
                {
                    b.HasOne("BackEnd.Models.Customer", "Customer")
                        .WithMany("ShoppingCarts")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BackEnd.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("BackEnd.Models.ShoppingCart", "Cart")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("CartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Dish", "Dish")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("DishID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Dish");
                });

            modelBuilder.Entity("BackEnd.Models.Store", b =>
                {
                    b.HasOne("BackEnd.Models.Seller", "Seller")
                        .WithOne("Store")
                        .HasForeignKey("BackEnd.Models.Store", "SellerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("BackEnd.Models.StoreViolationPenalty", b =>
                {
                    b.HasOne("BackEnd.Models.Store", "Store")
                        .WithMany("StoreViolationPenalties")
                        .HasForeignKey("StoreID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("BackEnd.Models.Supervise_", b =>
                {
                    b.HasOne("BackEnd.Models.Administrator", "Admin")
                        .WithMany("Supervise_s")
                        .HasForeignKey("AdminID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.StoreViolationPenalty", "Penalty")
                        .WithMany("Supervise_s")
                        .HasForeignKey("PenaltyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Penalty");
                });

            modelBuilder.Entity("BackEnd.Models.Administrator", b =>
                {
                    b.Navigation("EvaluateAfterSales");

                    b.Navigation("EvaluateComplaints");

                    b.Navigation("ReviewComments");

                    b.Navigation("Supervise_s");
                });

            modelBuilder.Entity("BackEnd.Models.AfterSaleApplication", b =>
                {
                    b.Navigation("EvaluateAfterSales");
                });

            modelBuilder.Entity("BackEnd.Models.Comment", b =>
                {
                    b.Navigation("CommentReplies");

                    b.Navigation("ReviewComments");
                });

            modelBuilder.Entity("BackEnd.Models.CouponManager", b =>
                {
                    b.Navigation("Coupons");
                });

            modelBuilder.Entity("BackEnd.Models.Courier", b =>
                {
                    b.Navigation("DeliveryTasks");
                });

            modelBuilder.Entity("BackEnd.Models.Customer", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Coupons");

                    b.Navigation("DeliveryTasks");

                    b.Navigation("FavoritesFolders");

                    b.Navigation("FoodOrders");

                    b.Navigation("ShoppingCarts");
                });

            modelBuilder.Entity("BackEnd.Models.DeliveryComplaint", b =>
                {
                    b.Navigation("EvaluateComplaints");
                });

            modelBuilder.Entity("BackEnd.Models.DeliveryTask", b =>
                {
                    b.Navigation("DeliveryComplaints");
                });

            modelBuilder.Entity("BackEnd.Models.Dish", b =>
                {
                    b.Navigation("MenuDishes");

                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("BackEnd.Models.FavoritesFolder", b =>
                {
                    b.Navigation("FavoriteItems");
                });

            modelBuilder.Entity("BackEnd.Models.FoodOrder", b =>
                {
                    b.Navigation("AfterSaleApplications");

                    b.Navigation("Comments");

                    b.Navigation("Coupons");

                    b.Navigation("DeliveryTask");
                });

            modelBuilder.Entity("BackEnd.Models.Menu", b =>
                {
                    b.Navigation("MenuDishes");
                });

            modelBuilder.Entity("BackEnd.Models.Seller", b =>
                {
                    b.Navigation("Store");
                });

            modelBuilder.Entity("BackEnd.Models.ShoppingCart", b =>
                {
                    b.Navigation("Order");

                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("BackEnd.Models.Store", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("CouponManagers");

                    b.Navigation("DeliveryTasks");

                    b.Navigation("FavoriteItems");

                    b.Navigation("FoodOrders");

                    b.Navigation("Menus");

                    b.Navigation("StoreViolationPenalties");
                });

            modelBuilder.Entity("BackEnd.Models.StoreViolationPenalty", b =>
                {
                    b.Navigation("Supervise_s");
                });

            modelBuilder.Entity("BackEnd.Models.User", b =>
                {
                    b.Navigation("Administrator");

                    b.Navigation("Courier");

                    b.Navigation("Customer");

                    b.Navigation("Seller");
                });
#pragma warning restore 612, 618
        }
    }
}
